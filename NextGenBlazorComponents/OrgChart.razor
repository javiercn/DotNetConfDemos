@typeparam TElement where TElement : IHaveChildren

<div class="d-flex justify-content-center">
    <div class="d-flex flex-column">
        @foreach (TElement ancestor in current!.GetAncestry().Reverse())
        {
            <OrgChartElement @key="ancestor.GetHashCode()" Element="ancestor" OnClick="(TElement e) => OnClick(e)">
                <Heading>@Heading(ancestor)</Heading>
                <Body>@Body(ancestor)</Body>
            </OrgChartElement>
        }
    </div>
</div>
<hr />
<div class="d-flex justify-content-center">
    @foreach (TElement child in current!.Children)
    {
        <OrgChartElement @key="child.GetHashCode()" Element="child" OnClick="(TElement e) => OnClick(e)">
            <Heading>@Heading(child)</Heading>
            <Body>@Body(child)</Body>
        </OrgChartElement>
    }
</div>

@code {
    TElement? current;

    protected override void OnParametersSet()
    {
        current = Element;
    }

    [Parameter]
    [EditorRequired]
    public TElement Element { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public RenderFragment<TElement>? Heading { private get; set; }

    [Parameter]
    [EditorRequired]
    public RenderFragment<TElement>? Body { private get; set; }

    void OnClick(TElement element)
    {
        current = element;
    }
}
